package com.mycompany.textimage;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ISO53
 */
public class TextImageFrame extends javax.swing.JFrame {

    BufferedImage image;
    BufferedImage scaledImage;

    /**
     * Creates new form TextImageFrame
     */
    public TextImageFrame() {
        initComponents();
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnl_background = new javax.swing.JPanel();
        jbtn_openFileChooser = new javax.swing.JButton();
        jpnl_bottomPanel = new javax.swing.JPanel();
        jpnl_image = new javax.swing.JPanel();
        jbtn_convert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jpnl_background.setBackground(new java.awt.Color(0, 0, 0));

        jbtn_openFileChooser.setBackground(new java.awt.Color(0, 0, 0));
        jbtn_openFileChooser.setForeground(new java.awt.Color(204, 0, 0));
        jbtn_openFileChooser.setText("Choose an Image File");
        jbtn_openFileChooser.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 1, true));
        jbtn_openFileChooser.setContentAreaFilled(false);
        jbtn_openFileChooser.setMinimumSize(new java.awt.Dimension(122, 22));
        jbtn_openFileChooser.setPreferredSize(new java.awt.Dimension(122, 22));
        jbtn_openFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_openFileChooserActionPerformed(evt);
            }
        });

        jpnl_bottomPanel.setLayout(new javax.swing.BoxLayout(jpnl_bottomPanel, javax.swing.BoxLayout.LINE_AXIS));

        jpnl_image.setBackground(new java.awt.Color(0, 0, 0));
        jpnl_image.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 1, true));

        javax.swing.GroupLayout jpnl_imageLayout = new javax.swing.GroupLayout(jpnl_image);
        jpnl_image.setLayout(jpnl_imageLayout);
        jpnl_imageLayout.setHorizontalGroup(
            jpnl_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 694, Short.MAX_VALUE)
        );
        jpnl_imageLayout.setVerticalGroup(
            jpnl_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        jpnl_bottomPanel.add(jpnl_image);

        jbtn_convert.setBackground(new java.awt.Color(0, 0, 0));
        jbtn_convert.setForeground(new java.awt.Color(204, 0, 0));
        jbtn_convert.setText("Convert Image to Text");
        jbtn_convert.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 1, true));
        jbtn_convert.setContentAreaFilled(false);
        jbtn_convert.setMinimumSize(new java.awt.Dimension(122, 22));
        jbtn_convert.setPreferredSize(new java.awt.Dimension(122, 22));
        jbtn_convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_convertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnl_backgroundLayout = new javax.swing.GroupLayout(jpnl_background);
        jpnl_background.setLayout(jpnl_backgroundLayout);
        jpnl_backgroundLayout.setHorizontalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpnl_bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtn_openFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtn_convert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpnl_backgroundLayout.setVerticalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtn_openFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtn_convert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpnl_bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jpnl_background);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_openFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_openFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "jpeg");
        fileChooser.setFileFilter(filter);
        fileChooser.setVisible(true);
        int value = fileChooser.showOpenDialog(this);

        if (value == JFileChooser.APPROVE_OPTION) {
            try {
                image = ImageIO.read(fileChooser.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(TextImageFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Scale the image so it fits the jpanel perfectly
            scaledImage = scale(image, jpnl_image.getWidth(), jpnl_image.getHeight());
            
            // Convert scaled image to monochrome
            scaledImage = convertMonochrome(scaledImage);
            
            // Create graphics2D jpanel
            Graphics2D panelGraphics = (Graphics2D) jpnl_image.getGraphics();
            
            // Draw the monochrome image to jpanel
            panelGraphics.drawImage(scaledImage, 0, 0, this);

            jbtn_convert.setText("Convert Image to Text");
            jbtn_convert.setEnabled(true);
        }

    }//GEN-LAST:event_jbtn_openFileChooserActionPerformed

    private void jbtn_convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_convertActionPerformed
        double k = 1024.0 / (double) image.getWidth();
        String imageText = imageToText(scale(convertMonochrome(image), (int) (image.getWidth() * k), (int) (image.getHeight() / 2 * k)));

        System.out.println("Done!");
        jbtn_convert.setText("DONE!");
        jbtn_convert.setEnabled(false);
    }//GEN-LAST:event_jbtn_convertActionPerformed

    public BufferedImage scale(BufferedImage image, int width, int height) {
        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        int x, y;
        int ww = image.getWidth();
        int hh = image.getHeight();
        int[] ys = new int[height];
        for (y = 0; y < height; y++) {
            ys[y] = y * hh / height;
        }
        for (x = 0; x < width; x++) {
            int newX = x * ww / width;
            for (y = 0; y < height; y++) {
                int col = image.getRGB(newX, ys[y]);
                img.setRGB(x, y, col);
            }
        }
        return img;
    }

    public BufferedImage convertMonochrome(BufferedImage image) {
        if (image == null) {
            return null;
        }

        BufferedImage monochromeImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
        
        // If the values ​​of red, green and blue are equalized, the resulting pixel will be grayscale.
        
        for (int i = 0; i < image.getHeight(); i++) {
            for (int j = 0; j < image.getWidth(); j++) {
                Color c = new Color(image.getRGB(j, i));
                int red = (int) (c.getRed());
                int green = (int) (c.getGreen());
                int blue = (int) (c.getBlue());

                int mix = ((red + green + blue) / 3);
                Color newColor = new Color(mix, mix, mix);

                monochromeImage.setRGB(j, i, newColor.getRGB());
            }
        }

        return monochromeImage;
    }

    public String imageToText(BufferedImage image) {
        String textImage = "";

        String userDefPath = "C:\\Users\\" + System.getProperty("user.name") + "\\Desktop\\text.txt";
        File log = new File(userDefPath);
        FileOutputStream fOS;
        OutputStreamWriter oSW;
        BufferedWriter bW = null;

        try {
            fOS = new FileOutputStream(log);
            oSW = new OutputStreamWriter(fOS, "UTF-8");
            bW = new BufferedWriter(oSW);
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(TextImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int h = 0; h < image.getHeight(); h++) {
            textImage = "\n";
            for (int w = 0; w < image.getWidth(); w++) {
                int RGB = image.getRGB(w, h);
                int blue = RGB & 0xff;
                //int green = (RGB & 0xff00) >> 8;
                //int red = (RGB & 0xff0000) >> 16;
                //All values will be same since this is a monochrome image

                // ░▒▓█ 
                if (blue < 51) {
                    textImage += "█";
                } else if (blue < 102) {
                    textImage += "▓";
                } else if (blue < 153) {
                    textImage += "▒";
                } else if (blue < 204) {
                    textImage += "░";
                } else if (blue < 255) {
                    textImage += " ";
                } else {
                    //wtf
                    textImage += " ";
                }
            }
            try {
                bW.append(textImage);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        try {
            bW.close();
        } catch (IOException ex) {
            Logger.getLogger(TextImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        return textImage;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TextImageFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtn_convert;
    private javax.swing.JButton jbtn_openFileChooser;
    private javax.swing.JPanel jpnl_background;
    private javax.swing.JPanel jpnl_bottomPanel;
    private javax.swing.JPanel jpnl_image;
    // End of variables declaration//GEN-END:variables
}
